// [===========================================================================]
// [                               C r y p t o x                               ]
// [---------------------------------------------------------------------------]
// [                                                                           ]
// [                          Copyright (C) 2016-2017                          ]
// [                      Rodrigo Madera <madera@acm.org>                      ]
// [                                                                           ]
// [---------------------------------------------------------------------------]
// [         Distributed under the Boost Software License, Version 1.0         ]
// [ Read accompanying LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt ]
// [===========================================================================]

#include "pch.hxx"
#include <cryptox/message_digests/digest.hxx>
using namespace cryptox;

static const std::string empty_string;
static const std::string lazy_dog = "The quick brown fox jumps over the lazy dog";

#define CHECK_DIGEST(algorithm, input, expected) \
	BOOST_CHECK(digest<algorithm>(input.c_str()) == expected); \
	BOOST_CHECK(digest<algorithm>(&input[0], input.size()) == expected); \
	BOOST_CHECK(digest<algorithm>(input.begin(), input.end()) == expected); \
	BOOST_CHECK(digest<algorithm>(input) == expected);

BOOST_AUTO_TEST_CASE(md2_digest_test) {
	{
		const md2::digest_type expected = {{
			0x83, 0x50, 0xe5, 0xa3, 0xe2, 0x4c, 0x15, 0x3d,
			0xf2, 0x27, 0x5c, 0x9f, 0x80, 0x69, 0x27, 0x73
		}};

		CHECK_DIGEST(md2, empty_string, expected);
	}
	{
		const md2::digest_type expected = {{
			0x03, 0xd8, 0x5a, 0x0d, 0x62, 0x9d, 0x2c, 0x44,
			0x2e, 0x98, 0x75, 0x25, 0x31, 0x9f, 0xc4, 0x71
		}};

		CHECK_DIGEST(md2, lazy_dog, expected);
	}
}

BOOST_AUTO_TEST_CASE(md5_digest_test) {
	{
		const md5::digest_type expected = {{
			0xd4, 0x1d, 0x8c, 0xd9, 0x8f, 0x00, 0xb2, 0x04,
			0xe9, 0x80, 0x09, 0x98, 0xec, 0xf8, 0x42, 0x7e
		}};

		CHECK_DIGEST(md5, empty_string, expected);
	}
	{
		const md5::digest_type expected = {{
			0x9e, 0x10, 0x7d, 0x9d, 0x37, 0x2b, 0xb6, 0x82,
			0x6b, 0xd8, 0x1d, 0x35, 0x42, 0xa4, 0x19, 0xd6
		}};

		CHECK_DIGEST(md5, lazy_dog, expected);
	}
}

BOOST_AUTO_TEST_CASE(sha_digest_test) {
	{
		const sha::digest_type expected = {{
			0xf9, 0x6c, 0xea, 0x19, 0x8a, 0xd1, 0xdd, 0x56,
			0x17, 0xac, 0x08, 0x4a, 0x3d, 0x92, 0xc6, 0x10,
			0x77, 0x08, 0xc0, 0xef
		}};

		CHECK_DIGEST(sha, empty_string, expected);
	}
	{
		const sha::digest_type expected = {{
			0xb0, 0x3b, 0x40, 0x1b, 0xa9, 0x2d, 0x77, 0x66,
			0x62, 0x21, 0xe8, 0x43, 0xfe, 0xeb, 0xf8, 0xc5,
			0x61, 0xce, 0xa5, 0xf7
		}};

		CHECK_DIGEST(sha, lazy_dog, expected);
	}
}

BOOST_AUTO_TEST_CASE(sha1_digest_test) {
	{
		const sha1::digest_type expected = {{
			0xda, 0x39, 0xa3, 0xee, 0x5e, 0x6b, 0x4b, 0x0d,
			0x32, 0x55, 0xbf, 0xef, 0x95, 0x60, 0x18, 0x90,
			0xaf, 0xd8, 0x07, 0x09
		}};

		CHECK_DIGEST(sha1, empty_string, expected);
	}
	{
		const sha1::digest_type expected = {{
			0x2f, 0xd4, 0xe1, 0xc6, 0x7a, 0x2d, 0x28, 0xfc,
			0xed, 0x84, 0x9e, 0xe1, 0xbb, 0x76, 0xe7, 0x39,
			0x1b, 0x93, 0xeb, 0x12
		}};

		CHECK_DIGEST(sha1, lazy_dog, expected);
	}
}

BOOST_AUTO_TEST_CASE(sha224_digest_test) {
	{
		const sha224::digest_type expected = {{
			0xd1, 0x4a, 0x02, 0x8c, 0x2a, 0x3a, 0x2b, 0xc9,
			0x47, 0x61, 0x02, 0xbb, 0x28, 0x82, 0x34, 0xc4,
			0x15, 0xa2, 0xb0, 0x1f, 0x82, 0x8e, 0xa6, 0x2a,
			0xc5, 0xb3, 0xe4, 0x2f
		}};

		CHECK_DIGEST(sha224, empty_string, expected);
	}
	{
		const sha224::digest_type expected = {{
			0x73, 0x0e, 0x10, 0x9b, 0xd7, 0xa8, 0xa3, 0x2b,
			0x1c, 0xb9, 0xd9, 0xa0, 0x9a, 0xa2, 0x32, 0x5d,
			0x24, 0x30, 0x58, 0x7d, 0xdb, 0xc0, 0xc3, 0x8b,
			0xad, 0x91, 0x15, 0x25
		}};

		CHECK_DIGEST(sha224, lazy_dog, expected);
	}
}

BOOST_AUTO_TEST_CASE(sha256_digest_test) {
	{
		const sha256::digest_type expected = {{
			0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14,
			0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
			0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c,
			0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55
		}};

		CHECK_DIGEST(sha256, empty_string, expected);
	}
	{
		const sha256::digest_type expected = {{
			0xd7, 0xa8, 0xfb, 0xb3, 0x07, 0xd7, 0x80, 0x94,
			0x69, 0xca, 0x9a, 0xbc, 0xb0, 0x08, 0x2e, 0x4f,
			0x8d, 0x56, 0x51, 0xe4, 0x6d, 0x3c, 0xdb, 0x76,
			0x2d, 0x02, 0xd0, 0xbf, 0x37, 0xc9, 0xe5, 0x92
		}};

		CHECK_DIGEST(sha256, lazy_dog, expected);
	}
}

BOOST_AUTO_TEST_CASE(sha384_digest_test) {
	{
		const sha384::digest_type expected = {{
			0x38, 0xb0, 0x60, 0xa7, 0x51, 0xac, 0x96, 0x38,
			0x4c, 0xd9, 0x32, 0x7e, 0xb1, 0xb1, 0xe3, 0x6a,
			0x21, 0xfd, 0xb7, 0x11, 0x14, 0xbe, 0x07, 0x43,
			0x4c, 0x0c, 0xc7, 0xbf, 0x63, 0xf6, 0xe1, 0xda,
			0x27, 0x4e, 0xde, 0xbf, 0xe7, 0x6f, 0x65, 0xfb,
			0xd5, 0x1a, 0xd2, 0xf1, 0x48, 0x98, 0xb9, 0x5b
		}};

		CHECK_DIGEST(sha384, empty_string, expected);
	}
	{
		const sha384::digest_type expected = {{
			0xca, 0x73, 0x7f, 0x10, 0x14, 0xa4, 0x8f, 0x4c,
			0x0b, 0x6d, 0xd4, 0x3c, 0xb1, 0x77, 0xb0, 0xaf,
			0xd9, 0xe5, 0x16, 0x93, 0x67, 0x54, 0x4c, 0x49,
			0x40, 0x11, 0xe3, 0x31, 0x7d, 0xbf, 0x9a, 0x50,
			0x9c, 0xb1, 0xe5, 0xdc, 0x1e, 0x85, 0xa9, 0x41,
			0xbb, 0xee, 0x3d, 0x7f, 0x2a, 0xfb, 0xc9, 0xb1
		}};

		CHECK_DIGEST(sha384, lazy_dog, expected);
	}
}

BOOST_AUTO_TEST_CASE(sha512_digest_test) {
	{
		const sha512::digest_type expected = {{
			0xcf, 0x83, 0xe1, 0x35, 0x7e, 0xef, 0xb8, 0xbd,
			0xf1, 0x54, 0x28, 0x50, 0xd6, 0x6d, 0x80, 0x07,
			0xd6, 0x20, 0xe4, 0x05, 0x0b, 0x57, 0x15, 0xdc,
			0x83, 0xf4, 0xa9, 0x21, 0xd3, 0x6c, 0xe9, 0xce,
			0x47, 0xd0, 0xd1, 0x3c, 0x5d, 0x85, 0xf2, 0xb0,
			0xff, 0x83, 0x18, 0xd2, 0x87, 0x7e, 0xec, 0x2f,
			0x63, 0xb9, 0x31, 0xbd, 0x47, 0x41, 0x7a, 0x81,
			0xa5, 0x38, 0x32, 0x7a, 0xf9, 0x27, 0xda, 0x3e
		}};

		CHECK_DIGEST(sha512, empty_string, expected);
	}
	{
		const sha512::digest_type expected = {{
			0x07, 0xe5, 0x47, 0xd9, 0x58, 0x6f, 0x6a, 0x73,
			0xf7, 0x3f, 0xba, 0xc0, 0x43, 0x5e, 0xd7, 0x69,
			0x51, 0x21, 0x8f, 0xb7, 0xd0, 0xc8, 0xd7, 0x88,
			0xa3, 0x09, 0xd7, 0x85, 0x43, 0x6b, 0xbb, 0x64,
			0x2e, 0x93, 0xa2, 0x52, 0xa9, 0x54, 0xf2, 0x39,
			0x12, 0x54, 0x7d, 0x1e, 0x8a, 0x3b, 0x5e, 0xd6,
			0xe1, 0xbf, 0xd7, 0x09, 0x78, 0x21, 0x23, 0x3f,
			0xa0, 0x53, 0x8f, 0x3d, 0xb8, 0x54, 0xfe, 0xe6
		}};

		CHECK_DIGEST(sha512, lazy_dog, expected);
	}
}
